/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as MainImport } from './routes/main'
import { Route as IndexImport } from './routes/index'
import { Route as StoryStoryIdImport } from './routes/story/$storyId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoryStoryIdRoute = StoryStoryIdImport.update({
  id: '/story/$storyId',
  path: '/story/$storyId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/story/$storyId': {
      id: '/story/$storyId'
      path: '/story/$storyId'
      fullPath: '/story/$storyId'
      preLoaderRoute: typeof StoryStoryIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/signup': typeof SignupRoute
  '/story/$storyId': typeof StoryStoryIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/signup': typeof SignupRoute
  '/story/$storyId': typeof StoryStoryIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/signup': typeof SignupRoute
  '/story/$storyId': typeof StoryStoryIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/main' | '/signup' | '/story/$storyId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/main' | '/signup' | '/story/$storyId'
  id: '__root__' | '/' | '/main' | '/signup' | '/story/$storyId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRoute
  SignupRoute: typeof SignupRoute
  StoryStoryIdRoute: typeof StoryStoryIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRoute,
  SignupRoute: SignupRoute,
  StoryStoryIdRoute: StoryStoryIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/main",
        "/signup",
        "/story/$storyId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/story/$storyId": {
      "filePath": "story/$storyId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
