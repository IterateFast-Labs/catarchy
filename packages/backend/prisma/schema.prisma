// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int      @id @default(autoincrement())
  walletAddress   String   @unique @db.VarChar(42)
  handle          String?  @unique @db.VarChar(15)
  createdAt       DateTime @default(now())
  cats            cat[]
  sentLetters     letter[] @relation("Sender")
  receivedLetters letter[] @relation("Receiver")
}

model authChallenge {
  id            String    @id @default(cuid())
  walletAddress String    @db.VarChar(42)
  nonce         String    @db.VarChar(64)
  issuedAt      DateTime  @default(now())
  expiresAt     DateTime
  usedAt        DateTime?

  @@index([walletAddress])
  @@index([expiresAt])
}

model cat {
  id      Int     @id @default(autoincrement())
  tokenId BigInt? @unique
  userId  Int?
  user    user?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  expression Int @default(0)
  empathy    Int @default(0)
  intellect  Int @default(0)
  charisma   Int @default(0)
  willpower  Int @default(0)
  passion    Int @default(0)
  integrity  Int @default(0)
  instinct   Int @default(0)

  growth       Int @default(0)
  emotionScore Int @default(100)

  lastEmotionAt DateTime @default(now())
  lastCareAt    DateTime @default(now())

  mintTx     String?   @db.VarChar(66)
  birthBlock BigInt?
  mintedAt   DateTime?

  createdAt   DateTime        @default(now())
  careEvents  careEvent[]
  emotionLogs catEmotionLog[]
}

model careEvent {
  id            Int      @id @default(autoincrement())
  catId         Int
  cat           cat      @relation(fields: [catId], references: [id])
  caredAt       DateTime @default(now())
  growthDelta   Int
  emotionBefore Int
  emotionAfter  Int

  @@index([catId, caredAt])
}

model catEmotionLog {
  id           Int      @id @default(autoincrement())
  catId        Int
  cat          cat      @relation(fields: [catId], references: [id])
  emotionScore Int
  recordedAt   DateTime @default(now())

  @@index([catId, recordedAt])
}

// Feature Letter
model letter {
  id         String    @id @default(cuid())
  senderId   Int
  sender     user      @relation("Sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   user      @relation("Receiver", fields: [receiverId], references: [id])
  title      String?   @db.VarChar(255)
  content    String    @db.Text
  sentAt     DateTime  @default(now())
  readAt     DateTime?
  deletedAt  DateTime?

  @@index([senderId])
  @@index([receiverId])
}

// 게임 내 환경변수 (care 쿨타임, 최대 메세지 발송 수..)
model systemPolicy {
  key       String   @id
  value     Json
  updatedAt DateTime @updatedAt
}
